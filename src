
#include "esp_camera.h"
#include <WiFi.h>
#include "esp_http_server.h"
//---------------
#include <WiFiClientSecure.h>

WiFiClientSecure client;

// Gemini API config
String apiKey = "XXXXXXXXX";       // Replace with your actual API key
String modelName = "gemini-1.5-flash-8b";  // or another Gemini model name
//String userPrompt = "If there's a person in the image, set classification_result=true. Otherwise, classification_result=false."; // or your own prompt
String userPrompt = "Please analyze the given image and provide a count of each product in the following format:\n"
                    "{\n"
                    "'Product 1 Name': number of 'Product 1',\n"
                    "'Product 2 Name': number of 'Product 2',\n"
                    "...\n"
                    "}\n"
                    "Ensure that the product names are clear and precise, and the count corresponds to how many of each product are visible in the image.";



// Classification config
int classificationInterval = 60000; // default interval (ms)
int totalImages = 0;
int totalTrueClassified = 0;
bool lastClassificationResult = false;

// For latest captured image
uint8_t* lastImageBuf = nullptr;
size_t lastImageLen = 0;

// Alarm LED
#define LED_PIN 2  // Change to correct pin for your board

//-----------------------
// ===================
// Camera model & pins
// ===================
#define CAMERA_MODEL_XIAO_ESP32S3

// Camera pin definitions for XIAO ESP32S3
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM     10
#define SIOD_GPIO_NUM     40
#define SIOC_GPIO_NUM     39

#define Y9_GPIO_NUM       48
#define Y8_GPIO_NUM       11
#define Y7_GPIO_NUM       12
#define Y6_GPIO_NUM       14
#define Y5_GPIO_NUM       16
#define Y4_GPIO_NUM       18
#define Y3_GPIO_NUM       17
#define Y2_GPIO_NUM       15
#define VSYNC_GPIO_NUM    38
#define HREF_GPIO_NUM     47
#define PCLK_GPIO_NUM     13

//#define LED_GPIO_NUM     -1   // No LED flash

// ===========================
// WiFi credentials
// ===========================
const char* ssid     = "XXXXXX";
const char* password = "XXXXXX";

httpd_handle_t server = NULL;

// ===========================
// HTML UI Page
// ===========================
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>AI Smart Retail Shelf</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; background: #f0f2f5; margin:0; padding:20px; }
    h1 { color:#2c3e50; }
    button { padding: 14px 28px; font-size: 18px; margin: 15px; cursor: pointer;
             border-radius:10px; border:none; background:#3498db; color:#fff; }
    button:hover { background:#2980b9; }
    img { margin-top:20px; max-width:90%; border:4px solid #2c3e50; border-radius:10px; }
    #result { margin-top:20px; font-size:20px; color:#16a085; font-weight:bold; }
    .card { background:#fff; padding:20px; border-radius:15px; box-shadow:0 4px 12px rgba(0,0,0,0.1); display:inline-block; }
  </style>
</head>
<body>
  <h1>AI Smart Retail Shelf</h1>
  <div class="card">
    <button onclick="captureImage()">Capture Image</button>
    <button onclick="classifyImage()">Classify with Gemini</button>
    <div><img id="photo" src=""></div>
    <div id="result"></div>
  </div>

  <script>
    let lastImageBlob = null;

    function captureImage() {
      fetch('/capture').then(res => res.blob()).then(blob => {
        lastImageBlob = blob;
        document.getElementById('photo').src = URL.createObjectURL(blob);
        document.getElementById('result').innerText = "‚úÖ Image captured!";
      });
    }

    async function classifyImage() {
      if (!lastImageBlob) {
        alert("Please capture an image first!");
        return;
      }

      // Convert Blob to Base64
      const reader = new FileReader();
      reader.readAsDataURL(lastImageBlob);
      reader.onloadend = async function() {
        const base64data = reader.result.split(",")[1];

        document.getElementById('result').innerText = "üîç Classifying image with Gemini...";

        try {
          const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=XXXX", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contents: [{
                parts: [
                  { text: "Classify this image and describe what you see." },
                  { inline_data: { mime_type: "image/jpeg", data: base64data } }
                ]
              }]
            })
          });

          const data = await response.json();
          console.log(data);

          if (data.candidates && data.candidates[0].content.parts[0].text) {
            document.getElementById('result').innerText = "üß† Gemini says: " + data.candidates[0].content.parts[0].text;
          } else {
            document.getElementById('result').innerText = "‚ö†Ô∏è No response from Gemini.";
          }
        } catch (err) {
          console.error(err);
          document.getElementById('result').innerText = "‚ùå Error connecting to Gemini.";
        }
      };
    }
  </script>
</body>
</html>
)rawliteral";

// ===========================
// Handlers
// ===========================
esp_err_t index_handler(httpd_req_t *req) {
  httpd_resp_set_type(req, "text/html");
  httpd_resp_send(req, index_html, HTTPD_RESP_USE_STRLEN);
  return ESP_OK;
}

esp_err_t capture_handler(httpd_req_t *req) {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    httpd_resp_send_500(req);
    return ESP_FAIL;
  }

  httpd_resp_set_type(req, "image/jpeg");
  httpd_resp_set_hdr(req, "Content-Disposition", "inline; filename=capture.jpg");
  httpd_resp_set_hdr(req, "Cache-Control", "no-store, no-cache, must-revalidate, max-age=0");
  httpd_resp_set_hdr(req, "Pragma", "no-cache");

  esp_err_t res = httpd_resp_send(req, (const char *)fb->buf, fb->len);
  esp_camera_fb_return(fb);
  return res;
}

// ===========================
// Start HTTP server
// ===========================
void startCameraServer() {
  httpd_config_t config = HTTPD_DEFAULT_CONFIG();
  config.server_port = 80;

  if (httpd_start(&server, &config) == ESP_OK) {
    httpd_uri_t uri_index = {
      .uri       = "/",
      .method    = HTTP_GET,
      .handler   = index_handler,
      .user_ctx  = NULL
    };
    httpd_register_uri_handler(server, &uri_index);

    httpd_uri_t uri_capture = {
      .uri       = "/capture",
      .method    = HTTP_GET,
      .handler   = capture_handler,
      .user_ctx  = NULL
    };
    httpd_register_uri_handler(server, &uri_capture);
  }
}

// ===========================
// Setup
// ===========================
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_QVGA;  // 320x240 (stable for web)
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_LATEST;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 2;

  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    ESP.restart();
  }

  // WiFi
  WiFi.mode(WIFI_STA);
  WiFi.setSleep(false);
  WiFi.begin(ssid, password);

  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected");
  Serial.print("üåê Open http://");
  Serial.println(WiFi.localIP());

  // Start server
  startCameraServer();
}

void loop() {
  delay(10000);
}
